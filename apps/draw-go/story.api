type (
	Request {
		Name string `path:"name,options=[you,me]"` // parameters are auto validated
	}

	Response {
		Message string `json:"message"`
	}

	TasksRequest {
		Keyword string `query:"keyword"` // parameters are auto validated
	}

	Task {
		Id          int64  `json:"id,optional"`
		Name        string `json:"name,optional"`
		Description string `json:"description,optional"`
		Data        string `json:"data,optional"`
		CreateTime  string `json:"create_time,optional"`
		UpdateTime  string `json:"update_time,optional"`
		OriImgKey   string `json:"ori_img_key,optional"`
		ImgUrl      string `json:"img_url,optional"`
		Status      int32  `json:"status,optional"`
	}
	User {
		ID         int64  `json:"id,optional"`
		Username   string `json:"username,optional"`
		Password   string `json:"password,optional"`
		CreateTime string `json:"create_time,optional"`
		UpdateTime string `json:"update_time,optional"`
		Jwt        string `json:"jwt,optional"`
		Status     int32  `json:"status,optional"`
	}
	Login {
		Username string `form:"username"`
		Password string `form:"password"`
	}
	CosCredentials {
		TmpSecretID  string `json:"TmpSecretId,omitempty"`
		TmpSecretKey string `json:"TmpSecretKey,omitempty"`
		SessionToken string `json:"Token,omitempty"`
	}

	TaskRequest {
		Task   Task `json:"task,optional"`
		Random bool `json:"random,optional"`
	}
	TaskDetailRequest {
		Id     int64 `form:"id,optional"`
		Random bool  `form:"random,optional"`
	}
	TaskResponse {
		Message string `json:"message"`
		Data    Task   `json:"data"`
	}
	TasksResponse {
		Message string `json:"message"`
		Data    []Task `json:"data"`
	}
	UserResponse {
		Message string `json:"message,optional"`
		Status  int32  `json:"status,optional"` // 0 注册/登录成功 1 账号重复/登录失败
		User    User   `json:"user,optional"`
	}
	CosCredentialsResponse {
		Message string         `json:"message"`
		Data    CosCredentials `json:"data"`
	}
	CosCredentialsRequest {
		Key string `form:"key"`
	}
	TextToSpeechResponse {
		Data []byte `json:"data"`
	}
	TextToSpeechRequest {
		Text string `json:"text"`
	}
)
service task-api {
	@handler RegisterHandler
	post /api/v1/user(User) returns (UserResponse)
	@handler LoginHandler
	get /api/v1/user(Login) returns (UserResponse)
}

@server (
	jwt: Auth // 开启 jwt 认证
)
service task-api {
	@handler GreetHandler
	get /api/v1/from/:name(Request) returns (Response)
	@handler UserInfoHandler
	get /api/v1/user_info returns (UserResponse)

	@handler TasksHandler
	get /api/v1/tasks(TasksRequest) returns (TasksResponse)

	@handler CreateTaskHandler
	post /api/v1/task(TaskRequest) returns (TaskResponse)
	@handler DeleteTaskHandler
	delete /api/v1/task(TaskRequest) returns (TaskResponse)
	@handler UpdateTaskHandler
	put /api/v1/task(TaskRequest) returns (TaskResponse)

	@handler TaskHandler
	get /api/v1/task(TaskDetailRequest) returns (TaskResponse)

	@handler CosCredentialsHandler
	get /api/v1/cos_credentials(CosCredentialsRequest) returns (CosCredentialsResponse)

	@handler TextToSpeechHandler
	post /api/v1/text2speech(TextToSpeechRequest) returns ([]byte)
}